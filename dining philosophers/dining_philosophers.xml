<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
// Const because they must be computable at compile time.
const int iterations = 2;
const int sem = 5;
const int phil = 5;
const int N = phil;

chan semWait[sem][phil];
chan semSignal[sem][phil];
chan semGo[sem][phil];</declaration>
	<template>
		<name x="5" y="5">Philosopher</name>
		<parameter>const int[0,4] n</parameter>
		<declaration>// Place local declarations here.
int[0,iterations] i = 0;
int[0,N-1] first = 0;
int[0,N-1] second = 0;

void get_chopsticks()
{
	first = (n &lt; 4)? n : 0;
	second = (n &lt; 4)? n + 1 : 4;
}</declaration>
		<location id="id0" x="112" y="-112">
			<name x="127" y="-119">wait2</name>
		</location>
		<location id="id1" x="-204" y="17">
			<name x="-263" y="8">signal</name>
		</location>
		<location id="id2" x="-51" y="17">
			<name x="-68" y="34">eating</name>
		</location>
		<location id="id3" x="112" y="17">
			<name x="127" y="8">wait4</name>
		</location>
		<location id="id4" x="112" y="-48">
			<name x="127" y="-59">wait3</name>
		</location>
		<location id="id5" x="112" y="-176">
			<name x="127" y="-187">wait1</name>
		</location>
		<location id="id6" x="-368" y="-176">
			<name x="-425" y="-187">done</name>
		</location>
		<location id="id7" x="-204" y="-178">
			<name x="-229" y="-212">thinking</name>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="127" y="-93">semGo[first][n]?</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="128" y="-152">semWait[first][n]!</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-365" y="-68">semSignal[second][n]!</label>
			<label kind="assignment" x="-272" y="-102">i := i + 1</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id5"/>
			<label kind="guard" x="-102" y="-195">i &lt; iterations</label>
			<label kind="assignment" x="-110" y="-178">get_chopsticks()</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-187" y="-8">semSignal[first][n]!</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-34" y="-8">semGo[second][n]?</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="127" y="-25">semWait[second][n]!</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="-331" y="-195">i &gt;= iterations</label>
		</transition>
	</template>
	<template>
		<name>Semaphore</name>
		<parameter>const int id,  const int queue_size, const int init_val</parameter>
		<declaration>//The value of the semaphore
int count = init_val;
//The queue of the semaphore
//value -1 denotes an empty array entry
int[-1,N-1] queue[queue_size];
//An auxiliary variable used to temporarily store process id
meta int[0,N-1] q;

void initialize ()
{
  for (i : int[0,queue_size-1])
      {queue[i] = -1;}
}

void deQueue ()
{
  for (i : int[1,queue_size-1])
    queue[i-1] = queue[i];
  queue[queue_size-1] = -1;
}

void enQueue (int p)
{
  int i = 0;
  while (queue[i]&gt;=0){i++;};
  queue[i]=p;
}

int[0,N-1] headQueue ( )
{
  return queue[0];
}

bool fullQueue ( )
{
  for (i : int[0,queue_size-1])
   {
     if (queue[i]==-1) {return false;}
   }
  return true;
}</declaration>
		<location id="id8" x="384" y="64">
			<committed/>
		</location>
		<location id="id9" x="608" y="320">
			<committed/>
		</location>
		<location id="id10" x="352" y="96">
			<name x="288" y="64">overflow</name>
		</location>
		<location id="id11" x="480" y="192">
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id8"/>
			<target ref="id11"/>
			<label kind="assignment" x="408" y="72">initialize()</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id11"/>
			<label kind="select" x="272" y="192">p:int[0,N-1]</label>
			<label kind="guard" x="272" y="208">count&gt;=0</label>
			<label kind="synchronisation" x="272" y="224">semSignal[id][p]?</label>
			<label kind="assignment" x="272" y="240">count++</label>
			<nail x="352" y="192"/>
			<nail x="352" y="224"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id9"/>
			<label kind="select" x="552" y="104">p:int[0,N-1]</label>
			<label kind="guard" x="552" y="120">count&gt;0</label>
			<label kind="synchronisation" x="552" y="136">semWait[id][p]?</label>
			<label kind="assignment" x="552" y="152">count--,
q=p</label>
			<nail x="608" y="192"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="select" x="248" y="112">p:int[0,N-1]</label>
			<label kind="guard" x="248" y="128">count&lt;=0 &amp;&amp; fullQueue()</label>
			<label kind="synchronisation" x="248" y="144">semWait[id][p]?</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="512" y="208">semGo[id][q]!</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id9"/>
			<label kind="select" x="360" y="280">p:int[0,N-1]</label>
			<label kind="guard" x="360" y="296">count&lt;0</label>
			<label kind="synchronisation" x="360" y="312">semSignal[id][p]?</label>
			<label kind="assignment" x="360" y="328">count++,
q=headQueue(),
deQueue()</label>
			<nail x="480" y="320"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id11"/>
			<label kind="select" x="480" y="-24">p:int[0,N-1]</label>
			<label kind="guard" x="480" y="-8">count&lt;=0 &amp;&amp; not fullQueue()</label>
			<label kind="synchronisation" x="480" y="8">semWait[id][p]?</label>
			<label kind="assignment" x="480" y="24">count--,
enQueue(p)</label>
			<nail x="480" y="64"/>
			<nail x="512" y="64"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
// Queue size = 2 for dining philosophers problem.
chopstick0 = Semaphore(0,2,1);
chopstick1 = Semaphore(1,2,1);
chopstick2 = Semaphore(2,2,1);
chopstick3 = Semaphore(3,2,1);
chopstick4 = Semaphore(4,2,1);

phil0 = Philosopher(0);
phil1 = Philosopher(1);
phil2 = Philosopher(2);
phil3 = Philosopher(3);
phil4 = Philosopher(4);

// List one or more processes to be composed into a system.
system chopstick0, chopstick1, chopstick2, chopstick3, chopstick4, phil0, phil1, phil2, phil3, phil4;</system>
	<queries>
		<query>
			<formula>A[] not (phil0.eating and phil1.eating)
			</formula>
			<comment>Neighboring philosophers never eat at the same time. (Correctness / Safety)
			</comment>
		</query>
		<query>
			<formula>A[] not (phil1.eating and phil2.eating)
			</formula>
			<comment>Neighboring philosophers never eat at the same time. (Correctness / Safety)
			</comment>
		</query>
		<query>
			<formula>A[] not (phil2.eating and phil3.eating)
			</formula>
			<comment>Neighboring philosophers never eat at the same time. (Correctness / Safety)
			</comment>
		</query>
		<query>
			<formula>A[] not (phil3.eating and phil4.eating)
			</formula>
			<comment>Neighboring philosophers never eat at the same time. (Correctness / Safety)
			</comment>
		</query>
		<query>
			<formula>A[] not (phil4.eating and phil0.eating)
			</formula>
			<comment>Neighboring philosophers never eat at the same time. (Correctness / Safety)
			</comment>
		</query>
		<query>
			<formula>phil0.done --&gt; phil0.i == iterations
			</formula>
			<comment>All philosophers should eat the same number of times. (Fairness)
			</comment>
		</query>
		<query>
			<formula>phil1.done --&gt; phil1.i == iterations
			</formula>
			<comment>All philosophers should eat the same number of times. (Fairness)
			</comment>
		</query>
		<query>
			<formula>phil2.done --&gt; phil2.i == iterations
			</formula>
			<comment>All philosophers should eat the same number of times. (Fairness)
			</comment>
		</query>
		<query>
			<formula>phil3.done --&gt; phil3.i == iterations
			</formula>
			<comment>All philosophers should eat the same number of times. (Fairness)
			</comment>
		</query>
		<query>
			<formula>phil4.done --&gt; phil4.i == iterations
			</formula>
			<comment>All philosophers should eat the same number of times. (Fairness)
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; (phil0.eating and phil2.eating)
			</formula>
			<comment>Existence of concurrency.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt;(phil0.eating and phil3.eating)
			</formula>
			<comment>Existence of concurrency.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; (phil1.eating and phil3.eating)
			</formula>
			<comment>Existence of concurrency.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; (phil1.eating and phil4.eating)
			</formula>
			<comment>Existence of concurrency.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; (phil2.eating and phil4.eating)
			</formula>
			<comment>Existence of concurrency.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; (phil0.done and phil1.done and phil2.done and phil3.done and phil4.done)
			</formula>
			<comment>The program eventually terminates.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; not (phil1.thinking and phil2.thinking)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>Absence of deadlock. (Reachability)
			</comment>
		</query>
	</queries>
</nta>
